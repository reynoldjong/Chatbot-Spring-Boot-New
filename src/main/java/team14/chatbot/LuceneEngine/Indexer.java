package team14.chatbot.LuceneEngine;

import java.io.*;
import java.nio.file.Paths;
import java.util.HashMap;
import org.apache.commons.io.FileUtils;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

/**
 * Indexer class used to index documents for Apache Lucene
 * 
 * @author Chris
 *
 */
public class Indexer {

  private String indexDirPath;
  private Directory indexDirectory;

  // need to specify where we are writing to
  // filePath = "src/main/resources/index/" for testing
  public Indexer(String indexDirPath) throws IOException {
    this.indexDirPath = indexDirPath;
    this.indexDirectory = FSDirectory.open(Paths.get(indexDirPath));
  }

  /**
   * Private method used to define what fields should be indexed for a URL
   * @param titleKey - title of the web page
   * @param headerKey - headers for the web page
   * @param body - body text of the web page
   * @return Document to be indexed by Lucene
   */
  private Document buildUrlDoc(String titleKey, String headerKey, String body) {
    Document document = new Document();

    StringField typeField = new StringField("type", "url", Field.Store.YES);
    StringField titleField =
        new StringField("title", titleKey, Field.Store.YES);
    StringField headerField =
        new StringField("header", headerKey, Field.Store.YES);
    TextField bodyField = new TextField("body", body, Field.Store.YES);

    document.add(typeField);
    document.add(titleField);
    document.add(headerField);
    document.add(bodyField);

    return document;
  }
  
  /**
   * Private method used to define what fields should be indexed for a text file
   * @param title - title of text
   * @param body - body of text
   * @return Document to be indexed by Lucene
   */
  private Document buildTextDoc(String title, String body) {
    Document document = new Document();

    StringField typeField = new StringField("type", "file", Field.Store.YES);
    StringField titleField = new StringField("title", title, Field.Store.YES);
    TextField bodyField = new TextField("body", body, Field.Store.YES);

    document.add(typeField);
    document.add(titleField);
    document.add(bodyField);

    return document;
  }

  /**
   * Main method used to index a URL obtained by the crawler
   * 
   * We are given the following format for any URL from crawler: HashMap<String
   * documentTitle, HashMap<String documentHeader, String body>> So we will
   * index for each title -> for each header -> body
   */
  public void indexUrl(HashMap<String, HashMap<String, String>> titleHash)
      throws IOException {
    StandardAnalyzer analyzer = new StandardAnalyzer();
    IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
    IndexWriter writer = new IndexWriter(indexDirectory, iwc);
    // for title in hashmap
    for (String titleKey : titleHash.keySet()) {
      HashMap<String, String> headerHash = titleHash.get(titleKey);
      // for header in hashmap
      for (String headerKey : headerHash.keySet()) {
        String body = headerHash.get(headerKey);
        // build the document we are hashing
        Document doc = buildUrlDoc(titleKey, headerKey, body);
        // write to index
        writer.addDocument(doc);
      }
    }
    writer.close();
  }

  /**
   * Main method used to index files obtained by the crawler
   * 
   * For documents, we are only given the title of the document and body of the
   * document
   */
  public void indexDoc(String title, String body) throws IOException {
    StandardAnalyzer analyzer = new StandardAnalyzer();
    IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
    IndexWriter writer = new IndexWriter(indexDirectory, iwc);
    Document doc = buildTextDoc(title, body);
    writer.addDocument(doc);
    writer.close();
  }

  /**
   * Method used to remove all indices generated by the indexer
   * @throws IOException
   */
  public void removeIndex() throws IOException {
    File dirFile = new File(this.indexDirPath);
    FileUtils.cleanDirectory(dirFile);
  }

}
