package team14.chatbot.Controller;

import com.opencsv.CSVWriter;
import com.opencsv.bean.StatefulBeanToCsv;
import com.opencsv.bean.StatefulBeanToCsvBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpHeaders;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import team14.chatbot.IBMWatsonEngine.QueryAssistant;
import team14.chatbot.IBMWatsonEngine.QueryEngine;
import team14.chatbot.IBMWatsonEngine.WatsonAssistant;
import team14.chatbot.IBMWatsonEngine.WatsonDiscovery;
import team14.chatbot.LuceneEngine.LuceneQueryEngine;
import team14.chatbot.Repository.QueryRepository;
import team14.chatbot.IBMWatsonEngine.*;
import team14.chatbot.Models.ChatbotQuery;
import team14.chatbot.utils.CustomMappingStrategy;

import javax.servlet.http.HttpServletResponse;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.*;

@RestController
public class ChatbotQueryController {

    @Autowired // This means to get the bean called
    // Which is auto-generated by Spring, we will use it to handle the data
    private QueryRepository queryRepository;

    private final QueryEngine queryEngine = new QueryEngine(WatsonDiscovery.buildDiscovery());
    private final QueryAssistant queryAssistant = new QueryAssistant(WatsonAssistant.buildAssistant());
    private final LuceneQueryEngine luceneQueryEngine = new LuceneQueryEngine("src/main/resources/index/documents");

    @GetMapping("/userquery")
    public Map<String, Object> chatbotQuery(@RequestParam String userQuery) {
        Hashtable<String, ArrayList<String>> watsonReply;
        userQuery = userQuery.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
        List<ChatbotQuery> existingQueries = queryRepository.findByMessage(userQuery);
        if (existingQueries.size() == 0) {
            ChatbotQuery chatbotQuery = new ChatbotQuery();
            chatbotQuery.setMessage(userQuery.replaceAll("\\+", " "));
            chatbotQuery.setFrequency(1);
            queryRepository.save(chatbotQuery);
        } else {
            for (ChatbotQuery eachQuery: existingQueries) {
                eachQuery.setFrequency(eachQuery.getFrequency() + 1);
                queryRepository.save(eachQuery);
            }
        }
        HashMap<String, Object> hashMap = new HashMap<>();
        try {
            userQuery = URLDecoder.decode(userQuery, "UTF-8");
            Hashtable<String, ArrayList<String>> assistantHashTable = queryAssistant.simpleAssistantQuery(userQuery);
            if (assistantHashTable.get("queryFlag").size() > 0 && assistantHashTable.get("queryFlag").get(0).equals("Need to query")) {
                // query watson discovery
                watsonReply = queryEngine.simpleQuery(userQuery);
            } else {
                watsonReply = assistantHashTable;
            }

            Hashtable<String, ArrayList<Object>> luceneReply = luceneQueryEngine.simpleQuery(userQuery);
            hashMap.put("watson", watsonReply);
            hashMap.put("lucene", luceneReply);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hashMap;


    }

    @GetMapping("/userquery/getData")
    public Iterable<Object[]> getAllChatbotQueries() {
        return queryRepository.findAllByFrequencyDesc();
    }

    @GetMapping("/userquery/exportCSV")
    public void exportQueriesCSV(HttpServletResponse response) throws Exception {

        CustomMappingStrategy<ChatbotQuery> mappingStrategy = new CustomMappingStrategy<>();
        mappingStrategy.setType(ChatbotQuery.class);

        //set file name and content type
        String filename = "queriesData.csv";

        response.setContentType("text/csv");
        response.setHeader(HttpHeaders.CONTENT_DISPOSITION,
                "attachment; filename=\"" + filename + "\"");

        //create a csv writer
        StatefulBeanToCsv<ChatbotQuery> writer = new StatefulBeanToCsvBuilder<ChatbotQuery>(response.getWriter())
                .withSeparator(CSVWriter.DEFAULT_SEPARATOR)
                .withMappingStrategy(mappingStrategy)
                .build();

        //write all users to csv file
        writer.write(queryRepository.findAll(Sort.by(Sort.Direction.DESC, "frequency")));
    }

}
